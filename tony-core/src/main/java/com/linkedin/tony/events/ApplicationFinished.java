/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.tony.events;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ApplicationFinished extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8449488367775084462L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApplicationFinished\",\"namespace\":\"com.linkedin.tony.events\",\"fields\":[{\"name\":\"applicationId\",\"type\":\"string\"},{\"name\":\"finishedTasks\",\"type\":\"int\"},{\"name\":\"failedTasks\",\"type\":\"int\"},{\"name\":\"metrics\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Metric\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ApplicationFinished> ENCODER =
      new BinaryMessageEncoder<ApplicationFinished>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ApplicationFinished> DECODER =
      new BinaryMessageDecoder<ApplicationFinished>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ApplicationFinished> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ApplicationFinished> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ApplicationFinished>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ApplicationFinished to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ApplicationFinished from a ByteBuffer. */
  public static ApplicationFinished fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence applicationId;
  @Deprecated public int finishedTasks;
  @Deprecated public int failedTasks;
  @Deprecated public java.util.List<com.linkedin.tony.events.Metric> metrics;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ApplicationFinished() {}

  /**
   * All-args constructor.
   * @param applicationId The new value for applicationId
   * @param finishedTasks The new value for finishedTasks
   * @param failedTasks The new value for failedTasks
   * @param metrics The new value for metrics
   */
  public ApplicationFinished(java.lang.CharSequence applicationId, java.lang.Integer finishedTasks, java.lang.Integer failedTasks, java.util.List<com.linkedin.tony.events.Metric> metrics) {
    this.applicationId = applicationId;
    this.finishedTasks = finishedTasks;
    this.failedTasks = failedTasks;
    this.metrics = metrics;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return applicationId;
    case 1: return finishedTasks;
    case 2: return failedTasks;
    case 3: return metrics;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: applicationId = (java.lang.CharSequence)value$; break;
    case 1: finishedTasks = (java.lang.Integer)value$; break;
    case 2: failedTasks = (java.lang.Integer)value$; break;
    case 3: metrics = (java.util.List<com.linkedin.tony.events.Metric>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'applicationId' field.
   * @return The value of the 'applicationId' field.
   */
  public java.lang.CharSequence getApplicationId() {
    return applicationId;
  }

  /**
   * Sets the value of the 'applicationId' field.
   * @param value the value to set.
   */
  public void setApplicationId(java.lang.CharSequence value) {
    this.applicationId = value;
  }

  /**
   * Gets the value of the 'finishedTasks' field.
   * @return The value of the 'finishedTasks' field.
   */
  public java.lang.Integer getFinishedTasks() {
    return finishedTasks;
  }

  /**
   * Sets the value of the 'finishedTasks' field.
   * @param value the value to set.
   */
  public void setFinishedTasks(java.lang.Integer value) {
    this.finishedTasks = value;
  }

  /**
   * Gets the value of the 'failedTasks' field.
   * @return The value of the 'failedTasks' field.
   */
  public java.lang.Integer getFailedTasks() {
    return failedTasks;
  }

  /**
   * Sets the value of the 'failedTasks' field.
   * @param value the value to set.
   */
  public void setFailedTasks(java.lang.Integer value) {
    this.failedTasks = value;
  }

  /**
   * Gets the value of the 'metrics' field.
   * @return The value of the 'metrics' field.
   */
  public java.util.List<com.linkedin.tony.events.Metric> getMetrics() {
    return metrics;
  }

  /**
   * Sets the value of the 'metrics' field.
   * @param value the value to set.
   */
  public void setMetrics(java.util.List<com.linkedin.tony.events.Metric> value) {
    this.metrics = value;
  }

  /**
   * Creates a new ApplicationFinished RecordBuilder.
   * @return A new ApplicationFinished RecordBuilder
   */
  public static com.linkedin.tony.events.ApplicationFinished.Builder newBuilder() {
    return new com.linkedin.tony.events.ApplicationFinished.Builder();
  }

  /**
   * Creates a new ApplicationFinished RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ApplicationFinished RecordBuilder
   */
  public static com.linkedin.tony.events.ApplicationFinished.Builder newBuilder(com.linkedin.tony.events.ApplicationFinished.Builder other) {
    return new com.linkedin.tony.events.ApplicationFinished.Builder(other);
  }

  /**
   * Creates a new ApplicationFinished RecordBuilder by copying an existing ApplicationFinished instance.
   * @param other The existing instance to copy.
   * @return A new ApplicationFinished RecordBuilder
   */
  public static com.linkedin.tony.events.ApplicationFinished.Builder newBuilder(com.linkedin.tony.events.ApplicationFinished other) {
    return new com.linkedin.tony.events.ApplicationFinished.Builder(other);
  }

  /**
   * RecordBuilder for ApplicationFinished instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApplicationFinished>
    implements org.apache.avro.data.RecordBuilder<ApplicationFinished> {

    private java.lang.CharSequence applicationId;
    private int finishedTasks;
    private int failedTasks;
    private java.util.List<com.linkedin.tony.events.Metric> metrics;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.linkedin.tony.events.ApplicationFinished.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.applicationId)) {
        this.applicationId = data().deepCopy(fields()[0].schema(), other.applicationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.finishedTasks)) {
        this.finishedTasks = data().deepCopy(fields()[1].schema(), other.finishedTasks);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.failedTasks)) {
        this.failedTasks = data().deepCopy(fields()[2].schema(), other.failedTasks);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.metrics)) {
        this.metrics = data().deepCopy(fields()[3].schema(), other.metrics);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ApplicationFinished instance
     * @param other The existing instance to copy.
     */
    private Builder(com.linkedin.tony.events.ApplicationFinished other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.applicationId)) {
        this.applicationId = data().deepCopy(fields()[0].schema(), other.applicationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.finishedTasks)) {
        this.finishedTasks = data().deepCopy(fields()[1].schema(), other.finishedTasks);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.failedTasks)) {
        this.failedTasks = data().deepCopy(fields()[2].schema(), other.failedTasks);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.metrics)) {
        this.metrics = data().deepCopy(fields()[3].schema(), other.metrics);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'applicationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getApplicationId() {
      return applicationId;
    }

    /**
      * Sets the value of the 'applicationId' field.
      * @param value The value of 'applicationId'.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder setApplicationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.applicationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'applicationId' field has been set.
      * @return True if the 'applicationId' field has been set, false otherwise.
      */
    public boolean hasApplicationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'applicationId' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder clearApplicationId() {
      applicationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'finishedTasks' field.
      * @return The value.
      */
    public java.lang.Integer getFinishedTasks() {
      return finishedTasks;
    }

    /**
      * Sets the value of the 'finishedTasks' field.
      * @param value The value of 'finishedTasks'.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder setFinishedTasks(int value) {
      validate(fields()[1], value);
      this.finishedTasks = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'finishedTasks' field has been set.
      * @return True if the 'finishedTasks' field has been set, false otherwise.
      */
    public boolean hasFinishedTasks() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'finishedTasks' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder clearFinishedTasks() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'failedTasks' field.
      * @return The value.
      */
    public java.lang.Integer getFailedTasks() {
      return failedTasks;
    }

    /**
      * Sets the value of the 'failedTasks' field.
      * @param value The value of 'failedTasks'.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder setFailedTasks(int value) {
      validate(fields()[2], value);
      this.failedTasks = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'failedTasks' field has been set.
      * @return True if the 'failedTasks' field has been set, false otherwise.
      */
    public boolean hasFailedTasks() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'failedTasks' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder clearFailedTasks() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'metrics' field.
      * @return The value.
      */
    public java.util.List<com.linkedin.tony.events.Metric> getMetrics() {
      return metrics;
    }

    /**
      * Sets the value of the 'metrics' field.
      * @param value The value of 'metrics'.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder setMetrics(java.util.List<com.linkedin.tony.events.Metric> value) {
      validate(fields()[3], value);
      this.metrics = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'metrics' field has been set.
      * @return True if the 'metrics' field has been set, false otherwise.
      */
    public boolean hasMetrics() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'metrics' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.ApplicationFinished.Builder clearMetrics() {
      metrics = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ApplicationFinished build() {
      try {
        ApplicationFinished record = new ApplicationFinished();
        record.applicationId = fieldSetFlags()[0] ? this.applicationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.finishedTasks = fieldSetFlags()[1] ? this.finishedTasks : (java.lang.Integer) defaultValue(fields()[1]);
        record.failedTasks = fieldSetFlags()[2] ? this.failedTasks : (java.lang.Integer) defaultValue(fields()[2]);
        record.metrics = fieldSetFlags()[3] ? this.metrics : (java.util.List<com.linkedin.tony.events.Metric>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ApplicationFinished>
    WRITER$ = (org.apache.avro.io.DatumWriter<ApplicationFinished>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ApplicationFinished>
    READER$ = (org.apache.avro.io.DatumReader<ApplicationFinished>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
