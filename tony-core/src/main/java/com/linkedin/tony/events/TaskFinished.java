/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.tony.events;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TaskFinished extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7930824749272249974L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskFinished\",\"namespace\":\"com.linkedin.tony.events\",\"fields\":[{\"name\":\"taskType\",\"type\":\"string\"},{\"name\":\"taskIndex\",\"type\":\"int\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"metrics\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Metric\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskFinished> ENCODER =
      new BinaryMessageEncoder<TaskFinished>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskFinished> DECODER =
      new BinaryMessageDecoder<TaskFinished>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TaskFinished> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TaskFinished> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TaskFinished>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TaskFinished to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TaskFinished from a ByteBuffer. */
  public static TaskFinished fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence taskType;
  @Deprecated public int taskIndex;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public java.util.List<com.linkedin.tony.events.Metric> metrics;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskFinished() {}

  /**
   * All-args constructor.
   * @param taskType The new value for taskType
   * @param taskIndex The new value for taskIndex
   * @param status The new value for status
   * @param metrics The new value for metrics
   */
  public TaskFinished(java.lang.CharSequence taskType, java.lang.Integer taskIndex, java.lang.CharSequence status, java.util.List<com.linkedin.tony.events.Metric> metrics) {
    this.taskType = taskType;
    this.taskIndex = taskIndex;
    this.status = status;
    this.metrics = metrics;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taskType;
    case 1: return taskIndex;
    case 2: return status;
    case 3: return metrics;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taskType = (java.lang.CharSequence)value$; break;
    case 1: taskIndex = (java.lang.Integer)value$; break;
    case 2: status = (java.lang.CharSequence)value$; break;
    case 3: metrics = (java.util.List<com.linkedin.tony.events.Metric>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'taskType' field.
   * @return The value of the 'taskType' field.
   */
  public java.lang.CharSequence getTaskType() {
    return taskType;
  }

  /**
   * Sets the value of the 'taskType' field.
   * @param value the value to set.
   */
  public void setTaskType(java.lang.CharSequence value) {
    this.taskType = value;
  }

  /**
   * Gets the value of the 'taskIndex' field.
   * @return The value of the 'taskIndex' field.
   */
  public java.lang.Integer getTaskIndex() {
    return taskIndex;
  }

  /**
   * Sets the value of the 'taskIndex' field.
   * @param value the value to set.
   */
  public void setTaskIndex(java.lang.Integer value) {
    this.taskIndex = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'metrics' field.
   * @return The value of the 'metrics' field.
   */
  public java.util.List<com.linkedin.tony.events.Metric> getMetrics() {
    return metrics;
  }

  /**
   * Sets the value of the 'metrics' field.
   * @param value the value to set.
   */
  public void setMetrics(java.util.List<com.linkedin.tony.events.Metric> value) {
    this.metrics = value;
  }

  /**
   * Creates a new TaskFinished RecordBuilder.
   * @return A new TaskFinished RecordBuilder
   */
  public static com.linkedin.tony.events.TaskFinished.Builder newBuilder() {
    return new com.linkedin.tony.events.TaskFinished.Builder();
  }

  /**
   * Creates a new TaskFinished RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskFinished RecordBuilder
   */
  public static com.linkedin.tony.events.TaskFinished.Builder newBuilder(com.linkedin.tony.events.TaskFinished.Builder other) {
    return new com.linkedin.tony.events.TaskFinished.Builder(other);
  }

  /**
   * Creates a new TaskFinished RecordBuilder by copying an existing TaskFinished instance.
   * @param other The existing instance to copy.
   * @return A new TaskFinished RecordBuilder
   */
  public static com.linkedin.tony.events.TaskFinished.Builder newBuilder(com.linkedin.tony.events.TaskFinished other) {
    return new com.linkedin.tony.events.TaskFinished.Builder(other);
  }

  /**
   * RecordBuilder for TaskFinished instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskFinished>
    implements org.apache.avro.data.RecordBuilder<TaskFinished> {

    private java.lang.CharSequence taskType;
    private int taskIndex;
    private java.lang.CharSequence status;
    private java.util.List<com.linkedin.tony.events.Metric> metrics;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.linkedin.tony.events.TaskFinished.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taskType)) {
        this.taskType = data().deepCopy(fields()[0].schema(), other.taskType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskIndex)) {
        this.taskIndex = data().deepCopy(fields()[1].schema(), other.taskIndex);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.metrics)) {
        this.metrics = data().deepCopy(fields()[3].schema(), other.metrics);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TaskFinished instance
     * @param other The existing instance to copy.
     */
    private Builder(com.linkedin.tony.events.TaskFinished other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.taskType)) {
        this.taskType = data().deepCopy(fields()[0].schema(), other.taskType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskIndex)) {
        this.taskIndex = data().deepCopy(fields()[1].schema(), other.taskIndex);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.metrics)) {
        this.metrics = data().deepCopy(fields()[3].schema(), other.metrics);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'taskType' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskType() {
      return taskType;
    }

    /**
      * Sets the value of the 'taskType' field.
      * @param value The value of 'taskType'.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder setTaskType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.taskType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taskType' field has been set.
      * @return True if the 'taskType' field has been set, false otherwise.
      */
    public boolean hasTaskType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taskType' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder clearTaskType() {
      taskType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskIndex' field.
      * @return The value.
      */
    public java.lang.Integer getTaskIndex() {
      return taskIndex;
    }

    /**
      * Sets the value of the 'taskIndex' field.
      * @param value The value of 'taskIndex'.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder setTaskIndex(int value) {
      validate(fields()[1], value);
      this.taskIndex = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'taskIndex' field has been set.
      * @return True if the 'taskIndex' field has been set, false otherwise.
      */
    public boolean hasTaskIndex() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'taskIndex' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder clearTaskIndex() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'metrics' field.
      * @return The value.
      */
    public java.util.List<com.linkedin.tony.events.Metric> getMetrics() {
      return metrics;
    }

    /**
      * Sets the value of the 'metrics' field.
      * @param value The value of 'metrics'.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder setMetrics(java.util.List<com.linkedin.tony.events.Metric> value) {
      validate(fields()[3], value);
      this.metrics = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'metrics' field has been set.
      * @return True if the 'metrics' field has been set, false otherwise.
      */
    public boolean hasMetrics() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'metrics' field.
      * @return This builder.
      */
    public com.linkedin.tony.events.TaskFinished.Builder clearMetrics() {
      metrics = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskFinished build() {
      try {
        TaskFinished record = new TaskFinished();
        record.taskType = fieldSetFlags()[0] ? this.taskType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.taskIndex = fieldSetFlags()[1] ? this.taskIndex : (java.lang.Integer) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.metrics = fieldSetFlags()[3] ? this.metrics : (java.util.List<com.linkedin.tony.events.Metric>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskFinished>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskFinished>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskFinished>
    READER$ = (org.apache.avro.io.DatumReader<TaskFinished>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
